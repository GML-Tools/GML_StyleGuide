// 2021-06-29 13:31:18


#region modify

// f = function(value, index, data)
/// @function apiArrayMap(array, f, data);
/// @param array
/// @param f
/// @param data
function apiArrayMap(_array, _f, _data) {
	var _size = array_length(_array);
	for (var _i = 0; _i < _size; _i += 1) array_set(_array, _i, _f(_array[_i], _i, _data));
}

// f = function(value, index, data)
/// @function apiArrayFilter(array, _f, _data);
/// @param array
/// @param f
/// @param data
function apiArrayFilter(_array, _f, _data) {
	apiArrayFill(_array, apiArrayBuildFilter(_array, _f, _data));
}

#endregion

#region build

// _f = function(value, index, data)
/// @function apiArrayBuildMap(array, _f, _data);
/// @param array
/// @param _f
/// @param _data
function apiArrayBuildMap(_array, _f, _data) {
	var _size = array_length(_array);
	var _dups = array_create(_size);
	for (var _i = 0; _i < _size; _i += 1) array_set(_dups, _i, _f(_array[_i], _i, _data));
	return _dups;
}

// _f = function(value, index, data)
/// @function apiBuildFilter(array, _f, _data);
/// @param array
/// @param _f
/// @param _data
function apiArrayBuildFilter(_array, _f, _data) {
	var _size = array_length(_array);
	var _newArray = array_create(_size);
    if (_size > 0) {
        var _i = 0, _value;
        do {
            _value = _array[_i];
            if (_f(_value, _i, _data)) array_push(_newArray, _value);
        } until (++_i == _size);
    }
    return _newArray;
}

#endregion

#region iterator

// _f = function(array, index, data)
function apiArrayFor(_array, _f, _data, _step, _index) {
	var _size = array_length(_array);
    if (_size--) {
        
		if (is_undefined(_step)) _step = 1;
		var _reverse = (sign(_step) == -1);
		
        if (is_undefined(_index)) _index = (_reverse ? _size : 0);
        if (_reverse) {
            do {
				
				if (_f(_array, _index, _data)) return _index;
				
                _index += _step;
            } until (_index < 0);
        } 
        else {
            do {
				
                if (_f(_array, _index, _data)) return _index;
				
                _index += _step;
            } until (_index > _size);
        }
    }
    return -1;
}

// _f = function(init, value, data)
 /// @function array_fold(_array, _f, _data, _reverse, _init);
function apiArrayFold(_array, _f, _data, _reverse) {
    var _size = array_length(_array);
	
	if (is_undefined(_reverse)) _reverse = false;
	
    var _init;
    if (_reverse) {
        _init = (argument_count > 4 ? argument[4] : _array[--_size]);
        while (_size--) _init = _f(_init, _array[_size], _data);
    } else {
        var _i = -1;
        _init = (argument_count > 4 ? argument[4] : _array[++_i]);
        while (++_i < _size) _init = _f(_init, _array[_i], _data);
    }
    return _init;
}

#endregion

