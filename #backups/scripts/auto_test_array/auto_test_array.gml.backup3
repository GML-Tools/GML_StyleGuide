// 2021-06-29 14:45:31

#region apiArrayFill
var array, arset;

arset = [1, 5, 2, 2];
array = apiArrayFill([], arset);
debug_assert(array_equals(array, arset), "apiArrayFill - 0");

arset = [];
array = apiArrayFill(array, arset);
debug_assert(array_equals(array, arset), "apiArrayFill - 1");

arset = [1, 23, 1];
array = apiArrayFill(array, arset);
debug_assert(array_equals(array, arset), "apiArrayFill - 2");

#endregion

#region apiArrayPlace
var array, artst;

array = [1, 4,  2,    8, 1, 5, 13];
artst = [1, 4, -1, "hi", 1, 5, 13];
apiArrayPlace(array, 2, -1, "hi");
debug_assert(array_equals(array, artst), "apiArrayPlace - 0");


array = [1, 4, 2, 1];
artst = array;
apiArrayPlace(array, 2);
debug_assert(array_equals(array, artst), "apiArrayPlace - 1");

array = ["mes", [], 0];
artst = ["mes", [], 0, 0, 0, 0, "hi", 1];
apiArrayPlace(array, 6, "hi", 1);
debug_assert(array_equals(array, artst), "apiArrayPlace - 2");

#endregion

#region apiArrayPlaceExt
var array, artst;

array = [1,   2, 3, 4];
artst = [-1, -2, 3, undefined, 0];
apiArrayPlaceExt(array, 0, [-1, -2], 3, undefined, [0]);
debug_assert(array_equals(array, artst), "apiArrayPlaceExt - 0");

array = [1, 2, 3];
artst = [1, 2, 3, "hello", -1, -2];
apiArrayPlaceExt(array, undefined, "hello", [-1, -2]);
debug_assert(array_equals(array, artst), "apiArrayPlaceExt - 1");


array = [1, 4,  2,    8, 1, 5, 13];
artst = [1, 4, -1, "hi", 1, 5, 13];
apiArrayPlaceExt(array, 2, [-1], "hi");
debug_assert(array_equals(array, artst), "apiArrayPlaceExt - 2");

array = [1, 4, 2, 1];
artst = array;
apiArrayPlaceExt(array, 4);
debug_assert(array_equals(array, artst), "apiArrayPlaceExt - 3");

#endregion

#region apiArrayInsertEmpty
var array, artst;

array = [1, 2, 3, 4];
artst = [1, 2, 3, 4, 0, 3, 4];
apiArrayInsertEmpty(array, 2, 3);
debug_assert(array_equals(array, artst), "apiArrayInsertEmpty - 0");

array = [1, 2, 3, 4];
artst = [1, 2, 3, 4, 1, 2, 3, 4];
apiArrayInsertEmpty(array, 0, 4);
debug_assert(array_equals(array, artst), "apiArrayInsertEmpty - 1");

array = [1, 2, 3, 4];
artst = [7, 7, 7, 7, 1, 2, 3, 4];
apiArrayInsertEmpty(array, 0, 4, 7);
debug_assert(array_equals(array, artst), "apiArrayInsertEmpty - 2");

array = [1, 2, 3, 4];
artst = [1, 2, 3, 4, 0, 0];
apiArrayInsertEmpty(array, 4, 2);
debug_assert(array_equals(array, artst), "apiArrayInsertEmpty - 3");

array = [1, 2, 3, 4];
artst = [1, 2, 3, 4, "z", "z"];
apiArrayInsertEmpty(array, 4, 2, "z");
debug_assert(array_equals(array, artst), "apiArrayInsertEmpty - 4");

array = [1, 2, 3, 4];
artst = [1, 2, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; // 10, 11, 12, 13
apiArrayInsertEmpty(array, 10, 4);
debug_assert(array_equals(array, artst), "apiArrayInsertEmpty - 5");

array = [1, 2, 3, 4];
artst = ["hi", "hi", 1, 2, 3, 4, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7];
apiArrayInsertEmpty(array, 10, 6, 7);
apiArrayInsertEmpty(array, 0, 2, "hi");
debug_assert(array_equals(array, artst), "apiArrayInsertEmpty - 6");

#endregion

#region apiArrayUnshift
var array, artst, count;

array = [1, 2, 3, 4];
artst = [-1, -2, 1, 2, 3, 4];
count = apiArrayUnshift(array, -1, -2);
debug_assert(array_equals(array, artst), "apiArrayUnshift - 0");
debug_assert(count == 2, "apiArrayUnshift - 0.count");

array = [1, 4, 2, 1];
artst = array;
count = apiArrayUnshift(array);
debug_assert(array_equals(array, artst), "apiArrayUnshift - 1");
debug_assert(count == 0, "apiArrayUnshift - 1.count");

array = [1, 2, 3, 4];
artst = [-1, -2, "sdf", undefined, 1, 2, 3, 4];
count = apiArrayUnshift(array, -1, -2, "sdf", undefined);
debug_assert(array_equals(array, artst), "apiArrayUnshift - 2");
debug_assert(count == 4, "apiArrayUnshift - 2.count");

#endregion

#region array_shift



#endregion
